"use client";

import { useState, useEffect } from "react";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { ScrollArea } from "./ui/scroll-area";
import { ChatMessage, getChatMessages, saveChatMessage } from "../lib/storage";
import { useParams } from "react-router";
import { Loader2 } from "lucide-react";

interface ChatInterfaceProps {
  patientId: string;
}

async function getChatResponse(
  patientId: string,
  query: string,
  patientInfo: string
) {
  const allMessages = getChatMessages(patientId);
  const response = await fetch("http://localhost:3002/api/completion", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ chat: allMessages, patientInfo }),
  });
  return response.json();
}

export default function ChatInterface({ patientId }: ChatInterfaceProps) {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    setMessages(getChatMessages(patientId));
  }, [patientId]);

  const handleSend = async () => {
    if (input.trim()) {
      const newMessage: ChatMessage = {
        role: "user",
        content: input.trim(),
      };
      saveChatMessage(newMessage, patientId);
      setMessages([...messages, newMessage]);
      setInput("");
      setIsLoading(true);

      // Simulate AI response
      // setTimeout(() => {
      //   const aiResponse: ChatMessage = {
      //     role: "assistant",
      //     content:
      //       "This is a simulated AI response. In a real application, this would be generated by an AI model.",
      //   };
      //   saveChatMessage(aiResponse, patientId);
      //   setMessages((prevMessages) => [...prevMessages, aiResponse]);
      // }, 1000);

      // Get AI response
      const response = await getChatResponse(patientId, input, "patientInfo");
      const { data } = response;
      const aiResponse: ChatMessage = {
        ...data,
      };
      setMessages((prevMessages) => [...prevMessages, aiResponse]);
      saveChatMessage(aiResponse, patientId);
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-[600px] border rounded-lg">
      <ScrollArea className="flex-grow p-4">
        {messages.map((message, index) => (
          <div
            key={index}
            className={`mb-4 p-2 rounded-lg ${
              message.role === "user" ? "bg-blue-100 ml-auto" : "bg-gray-100"
            } max-w-[70%]`}
            dangerouslySetInnerHTML={{ __html: message.content }}
          />
        ))}
      </ScrollArea>
      <div className="flex p-4 border-t">
        <Input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Type your message..."
          className="flex-grow mr-2"
        />
        <Button onClick={handleSend} disabled={isLoading}>
          {isLoading ? <Loader2 size={24} /> : "Send"}
        </Button>
      </div>
    </div>
  );
}
